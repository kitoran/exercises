В конец добавить полное опр-е функции для лимитных ординалов с гаммой для сукцессоров ит д
Б/?/?/?/?/?бр/?ёЁйцук||||ёёёЁ


Hello everyone! 
In this video i want to demonstrate the concept of ordinals. I will only talk about the beginning of the ordinal hierarchy. 
Imagine we have a function, y = x+1. We can repeatedly iterate this funtion any number of times starting from zero, the result will be n.
Now imagine this function, 1/(2-x). You can iterate this function an many times as you want, and you will never exceed 1, but forever approach it. So it would make sense to say that the infinitieth iteration of this function is 1. And 1 is a fixed point of this function, so when we iterate the duinction further, we don't go ahywhere else.
Now let's redefine our function to be 1.1 when x equals 1. Now i will still say that after infinity iterations we come to 1, even though 1 isn't actually in the range of our function. But now after infitnity iterations you can iterate the function one more time, and then another one, and you get new values.
Now we can take this fragment of the function and copy it here and here and here, so now we can iterate this fuinction infinity times, and then infinity times more, and then even more. To do this we first take the fractional part of x, then apply the function and then add back the integral part of x. This is the formula:
f(x) = (1/2-{x}) + [x]
This function you can iterate infinity times, and then another infinity times and then some.
We say that this proccess reaches value 1 after omega iterations, so omega is the word for this sort of infinity. We don't usually say omega when talking about infinite limits in analysis, for example, because this is a different, although related, concept. Here it's good to have a separate name for this first infinity because we have other infinities bigger that it.
Ordinals are simply the indices of steps in this proccess, so you have the first step, the second step and so on, then the step number omega, so 1, 2, all natural numbers are ordinals, and omega is also an ordinal.
The next ordinal is called omega plus one, then omega plus two and so on. Then on the step omega times 2 this proccess reaches the value 2. Actually for this function this repeated iteration reaches n on the step omega times n.
Now I want to construct a function that you can iterate even more times. To do that i first apply a function that stretches this interval (0,1) into the whole positive half-line. Then to the result i apply the previous function that i showed, and then apply the inverse of that stretching function. As a result this whole infinite quadrant of the plane has been squished into this smallsquare. Now again i copy this fragment.  
This function we can iterate omega times, omega times 2, omega times three and so on. We get 1-1/2, 1-1/3, 1-1/4 and so on. We can even iterate it omega squared, so iterate it omega times and repeat this proccess itself omega times, to get to 1. And we can iterate it omega squared more times to get to 2.
Now we can squish and copy this function once more. This function we can iterate omega squared times and get to 1/2, then omega squared more times and get to 2/3, then 3/4 and so on, and if we iterate omega cubed times we get to one. We can do this squishing operation as many times as we want and we get a function that we can iterate more and more times without getting stuck or going off to infinity.

In principle we could construct a function like this, that we can iterate omega to the power of n times for any n with this formula, or that we can iterate alpha times for any ordinal alpha that you defined fundamental sequences up to with this formula, but the functions that i constructed are nice in that you can write them as an expression involving only basic arithmetic and the integral and fractional parts.



include:
ordinals are steps in monotonic proccesses
explicit formula, parts in latex
You could extend forany ordinal by fundamental sequences,f(x) = f_[x](x), f_\alpha (x) = f_\alpha[[x]](x)
you could have different order types but those aren't proccesses (cos x + x + 1)